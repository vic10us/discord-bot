@using Discord.Rest
@inherits LayoutComponentBase
@inject IDiscordUserService _discordUserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Account/Manage">
                        <span class="bi bi-person-fill" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/Account/Login">
                        <span class="bi bi-person-badge" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
@*             @if (isLoggedIn)
            {
                <img class="profile-image" src="@avatarUrl" /> @userName
            }
            else
            {
                <NavLink class="nav-link" href="login">Login</NavLink>
            } *@
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool isLoggedIn = false;
    private string? avatarUrl = null;
    private string? userName = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
            avatarUrl = user.Claims.FirstOrDefault(c => c.Type.Equals("urn:discord:avatar_url"))?.Value ?? "";
        }
    }
}